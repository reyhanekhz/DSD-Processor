$date
	Tue Jul 29 02:25:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$scope module CPU $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # start $end
$var wire 1 $ reg_write_enable $end
$var wire 16 % reg_write_data [15:0] $end
$var wire 2 & reg_write_addr [1:0] $end
$var wire 16 ' reg_read_data2 [15:0] $end
$var wire 16 ( reg_read_data1 [15:0] $end
$var wire 2 ) reg_read_addr2 [1:0] $end
$var wire 2 * reg_read_addr1 [1:0] $end
$var wire 1 + ready $end
$var wire 1 , mem_write_enable $end
$var wire 1 - mem_read_enable $end
$var wire 16 . mem_data_out [15:0] $end
$var wire 16 / mem_data_in [15:0] $end
$var wire 16 0 mem_address [15:0] $end
$var wire 1 1 alu_start $end
$var wire 16 2 alu_result_low [15:0] $end
$var wire 16 3 alu_result_high [15:0] $end
$var wire 3 4 alu_opcode [2:0] $end
$var wire 1 5 alu_done $end
$var wire 16 6 alu_b [15:0] $end
$var wire 16 7 alu_a [15:0] $end
$scope module ALU $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 1 start $end
$var wire 3 8 opcode [2:0] $end
$var wire 32 9 karatsuba_result [31:0] $end
$var wire 1 : karatsuba_done $end
$var wire 16 ; div_remainder [15:0] $end
$var wire 16 < div_quotient [15:0] $end
$var wire 1 = div_done $end
$var wire 1 > cout_sub $end
$var wire 1 ? cout_add $end
$var wire 16 @ b [15:0] $end
$var wire 16 A a [15:0] $end
$var wire 16 B CSA_sub_result [15:0] $end
$var wire 16 C CSA_add_result [15:0] $end
$var reg 1 D div_start $end
$var reg 1 5 done $end
$var reg 1 E karatsuba_start $end
$var reg 16 F result_high [15:0] $end
$var reg 16 G result_low [15:0] $end
$var reg 2 H state [1:0] $end
$scope module adder $end
$var wire 1 I cin $end
$var wire 4 J sum3_1 [3:0] $end
$var wire 4 K sum3_0 [3:0] $end
$var wire 4 L sum2_1 [3:0] $end
$var wire 4 M sum2_0 [3:0] $end
$var wire 4 N sum1_1 [3:0] $end
$var wire 4 O sum1_0 [3:0] $end
$var wire 16 P sum [15:0] $end
$var wire 1 ? cout $end
$var wire 1 Q c3_1 $end
$var wire 1 R c3_0 $end
$var wire 1 S c2_1 $end
$var wire 1 T c2_0 $end
$var wire 1 U c2 $end
$var wire 1 V c1_1 $end
$var wire 1 W c1_0 $end
$var wire 1 X c1 $end
$var wire 1 Y c0 $end
$var wire 16 Z b [15:0] $end
$var wire 16 [ a [15:0] $end
$scope module rca0 $end
$var wire 4 \ a [3:0] $end
$var wire 4 ] b [3:0] $end
$var wire 1 I cin $end
$var wire 4 ^ sum [3:0] $end
$var wire 1 Y cout $end
$var wire 1 _ c3 $end
$var wire 1 ` c2 $end
$var wire 1 a c1 $end
$scope module fa0 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 I cin $end
$var wire 1 a cout $end
$var wire 1 d sum $end
$var wire 1 e x $end
$var wire 1 f y $end
$var wire 1 g z $end
$upscope $end
$scope module fa1 $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 a cin $end
$var wire 1 ` cout $end
$var wire 1 j sum $end
$var wire 1 k x $end
$var wire 1 l y $end
$var wire 1 m z $end
$upscope $end
$scope module fa2 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 ` cin $end
$var wire 1 _ cout $end
$var wire 1 p sum $end
$var wire 1 q x $end
$var wire 1 r y $end
$var wire 1 s z $end
$upscope $end
$scope module fa3 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 _ cin $end
$var wire 1 Y cout $end
$var wire 1 v sum $end
$var wire 1 w x $end
$var wire 1 x y $end
$var wire 1 y z $end
$upscope $end
$upscope $end
$scope module rca1_0 $end
$var wire 4 z a [3:0] $end
$var wire 4 { b [3:0] $end
$var wire 1 | cin $end
$var wire 4 } sum [3:0] $end
$var wire 1 W cout $end
$var wire 1 ~ c3 $end
$var wire 1 !" c2 $end
$var wire 1 "" c1 $end
$scope module fa0 $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 | cin $end
$var wire 1 "" cout $end
$var wire 1 %" sum $end
$var wire 1 &" x $end
$var wire 1 '" y $end
$var wire 1 (" z $end
$upscope $end
$scope module fa1 $end
$var wire 1 )" a $end
$var wire 1 *" b $end
$var wire 1 "" cin $end
$var wire 1 !" cout $end
$var wire 1 +" sum $end
$var wire 1 ," x $end
$var wire 1 -" y $end
$var wire 1 ." z $end
$upscope $end
$scope module fa2 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 !" cin $end
$var wire 1 ~ cout $end
$var wire 1 1" sum $end
$var wire 1 2" x $end
$var wire 1 3" y $end
$var wire 1 4" z $end
$upscope $end
$scope module fa3 $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 ~ cin $end
$var wire 1 W cout $end
$var wire 1 7" sum $end
$var wire 1 8" x $end
$var wire 1 9" y $end
$var wire 1 :" z $end
$upscope $end
$upscope $end
$scope module rca1_1 $end
$var wire 4 ;" a [3:0] $end
$var wire 4 <" b [3:0] $end
$var wire 1 =" cin $end
$var wire 4 >" sum [3:0] $end
$var wire 1 V cout $end
$var wire 1 ?" c3 $end
$var wire 1 @" c2 $end
$var wire 1 A" c1 $end
$scope module fa0 $end
$var wire 1 B" a $end
$var wire 1 C" b $end
$var wire 1 =" cin $end
$var wire 1 A" cout $end
$var wire 1 D" sum $end
$var wire 1 E" x $end
$var wire 1 F" y $end
$var wire 1 G" z $end
$upscope $end
$scope module fa1 $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 A" cin $end
$var wire 1 @" cout $end
$var wire 1 J" sum $end
$var wire 1 K" x $end
$var wire 1 L" y $end
$var wire 1 M" z $end
$upscope $end
$scope module fa2 $end
$var wire 1 N" a $end
$var wire 1 O" b $end
$var wire 1 @" cin $end
$var wire 1 ?" cout $end
$var wire 1 P" sum $end
$var wire 1 Q" x $end
$var wire 1 R" y $end
$var wire 1 S" z $end
$upscope $end
$scope module fa3 $end
$var wire 1 T" a $end
$var wire 1 U" b $end
$var wire 1 ?" cin $end
$var wire 1 V cout $end
$var wire 1 V" sum $end
$var wire 1 W" x $end
$var wire 1 X" y $end
$var wire 1 Y" z $end
$upscope $end
$upscope $end
$scope module rca2_0 $end
$var wire 4 Z" a [3:0] $end
$var wire 4 [" b [3:0] $end
$var wire 1 \" cin $end
$var wire 4 ]" sum [3:0] $end
$var wire 1 T cout $end
$var wire 1 ^" c3 $end
$var wire 1 _" c2 $end
$var wire 1 `" c1 $end
$scope module fa0 $end
$var wire 1 a" a $end
$var wire 1 b" b $end
$var wire 1 \" cin $end
$var wire 1 `" cout $end
$var wire 1 c" sum $end
$var wire 1 d" x $end
$var wire 1 e" y $end
$var wire 1 f" z $end
$upscope $end
$scope module fa1 $end
$var wire 1 g" a $end
$var wire 1 h" b $end
$var wire 1 `" cin $end
$var wire 1 _" cout $end
$var wire 1 i" sum $end
$var wire 1 j" x $end
$var wire 1 k" y $end
$var wire 1 l" z $end
$upscope $end
$scope module fa2 $end
$var wire 1 m" a $end
$var wire 1 n" b $end
$var wire 1 _" cin $end
$var wire 1 ^" cout $end
$var wire 1 o" sum $end
$var wire 1 p" x $end
$var wire 1 q" y $end
$var wire 1 r" z $end
$upscope $end
$scope module fa3 $end
$var wire 1 s" a $end
$var wire 1 t" b $end
$var wire 1 ^" cin $end
$var wire 1 T cout $end
$var wire 1 u" sum $end
$var wire 1 v" x $end
$var wire 1 w" y $end
$var wire 1 x" z $end
$upscope $end
$upscope $end
$scope module rca2_1 $end
$var wire 4 y" a [3:0] $end
$var wire 4 z" b [3:0] $end
$var wire 1 {" cin $end
$var wire 4 |" sum [3:0] $end
$var wire 1 S cout $end
$var wire 1 }" c3 $end
$var wire 1 ~" c2 $end
$var wire 1 !# c1 $end
$scope module fa0 $end
$var wire 1 "# a $end
$var wire 1 ## b $end
$var wire 1 {" cin $end
$var wire 1 !# cout $end
$var wire 1 $# sum $end
$var wire 1 %# x $end
$var wire 1 &# y $end
$var wire 1 '# z $end
$upscope $end
$scope module fa1 $end
$var wire 1 (# a $end
$var wire 1 )# b $end
$var wire 1 !# cin $end
$var wire 1 ~" cout $end
$var wire 1 *# sum $end
$var wire 1 +# x $end
$var wire 1 ,# y $end
$var wire 1 -# z $end
$upscope $end
$scope module fa2 $end
$var wire 1 .# a $end
$var wire 1 /# b $end
$var wire 1 ~" cin $end
$var wire 1 }" cout $end
$var wire 1 0# sum $end
$var wire 1 1# x $end
$var wire 1 2# y $end
$var wire 1 3# z $end
$upscope $end
$scope module fa3 $end
$var wire 1 4# a $end
$var wire 1 5# b $end
$var wire 1 }" cin $end
$var wire 1 S cout $end
$var wire 1 6# sum $end
$var wire 1 7# x $end
$var wire 1 8# y $end
$var wire 1 9# z $end
$upscope $end
$upscope $end
$scope module rca3_0 $end
$var wire 4 :# a [3:0] $end
$var wire 4 ;# b [3:0] $end
$var wire 1 <# cin $end
$var wire 4 =# sum [3:0] $end
$var wire 1 R cout $end
$var wire 1 ># c3 $end
$var wire 1 ?# c2 $end
$var wire 1 @# c1 $end
$scope module fa0 $end
$var wire 1 A# a $end
$var wire 1 B# b $end
$var wire 1 <# cin $end
$var wire 1 @# cout $end
$var wire 1 C# sum $end
$var wire 1 D# x $end
$var wire 1 E# y $end
$var wire 1 F# z $end
$upscope $end
$scope module fa1 $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var wire 1 @# cin $end
$var wire 1 ?# cout $end
$var wire 1 I# sum $end
$var wire 1 J# x $end
$var wire 1 K# y $end
$var wire 1 L# z $end
$upscope $end
$scope module fa2 $end
$var wire 1 M# a $end
$var wire 1 N# b $end
$var wire 1 ?# cin $end
$var wire 1 ># cout $end
$var wire 1 O# sum $end
$var wire 1 P# x $end
$var wire 1 Q# y $end
$var wire 1 R# z $end
$upscope $end
$scope module fa3 $end
$var wire 1 S# a $end
$var wire 1 T# b $end
$var wire 1 ># cin $end
$var wire 1 R cout $end
$var wire 1 U# sum $end
$var wire 1 V# x $end
$var wire 1 W# y $end
$var wire 1 X# z $end
$upscope $end
$upscope $end
$scope module rca3_1 $end
$var wire 4 Y# a [3:0] $end
$var wire 4 Z# b [3:0] $end
$var wire 1 [# cin $end
$var wire 4 \# sum [3:0] $end
$var wire 1 Q cout $end
$var wire 1 ]# c3 $end
$var wire 1 ^# c2 $end
$var wire 1 _# c1 $end
$scope module fa0 $end
$var wire 1 `# a $end
$var wire 1 a# b $end
$var wire 1 [# cin $end
$var wire 1 _# cout $end
$var wire 1 b# sum $end
$var wire 1 c# x $end
$var wire 1 d# y $end
$var wire 1 e# z $end
$upscope $end
$scope module fa1 $end
$var wire 1 f# a $end
$var wire 1 g# b $end
$var wire 1 _# cin $end
$var wire 1 ^# cout $end
$var wire 1 h# sum $end
$var wire 1 i# x $end
$var wire 1 j# y $end
$var wire 1 k# z $end
$upscope $end
$scope module fa2 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 ^# cin $end
$var wire 1 ]# cout $end
$var wire 1 n# sum $end
$var wire 1 o# x $end
$var wire 1 p# y $end
$var wire 1 q# z $end
$upscope $end
$scope module fa3 $end
$var wire 1 r# a $end
$var wire 1 s# b $end
$var wire 1 ]# cin $end
$var wire 1 Q cout $end
$var wire 1 t# sum $end
$var wire 1 u# x $end
$var wire 1 v# y $end
$var wire 1 w# z $end
$upscope $end
$upscope $end
$upscope $end
$scope module div_unit $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 D start $end
$var wire 16 x# divisor [15:0] $end
$var wire 16 y# dividend [15:0] $end
$var reg 5 z# count [4:0] $end
$var reg 1 = done $end
$var reg 16 {# quotient [15:0] $end
$var reg 16 |# remainder [15:0] $end
$var reg 2 }# state [1:0] $end
$var reg 17 ~# sub_result [16:0] $end
$var reg 16 !$ temp_dividend [15:0] $end
$var reg 16 "$ temp_divisor [15:0] $end
$var reg 16 #$ temp_quotient [15:0] $end
$var reg 17 $$ temp_remainder [16:0] $end
$upscope $end
$scope module mult_unit $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 E start $end
$var wire 16 %$ z2 [15:0] $end
$var wire 16 &$ z0 [15:0] $end
$var wire 8 '$ y_low [7:0] $end
$var wire 8 ($ y_high [7:0] $end
$var wire 16 )$ y [15:0] $end
$var wire 8 *$ x_low [7:0] $end
$var wire 8 +$ x_high [7:0] $end
$var wire 16 ,$ x [15:0] $end
$var wire 16 -$ w0 [15:0] $end
$var wire 1 .$ d2 $end
$var wire 1 /$ d1 $end
$var wire 1 0$ d0 $end
$var reg 1 : done $end
$var reg 32 1$ product [31:0] $end
$var reg 1 2$ s0 $end
$var reg 1 3$ s1 $end
$var reg 1 4$ s2 $end
$var reg 2 5$ state [1:0] $end
$var reg 16 6$ z1 [15:0] $end
$scope module m0 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 2$ start $end
$var wire 8 7$ x [7:0] $end
$var wire 8 8$ y [7:0] $end
$var reg 4 9$ count [3:0] $end
$var reg 1 0$ done $end
$var reg 16 :$ product [15:0] $end
$var reg 2 ;$ state [1:0] $end
$var reg 16 <$ x_extended [15:0] $end
$var reg 8 =$ y_reg [7:0] $end
$upscope $end
$scope module m1 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 3$ start $end
$var wire 8 >$ x [7:0] $end
$var wire 8 ?$ y [7:0] $end
$var reg 4 @$ count [3:0] $end
$var reg 1 .$ done $end
$var reg 16 A$ product [15:0] $end
$var reg 2 B$ state [1:0] $end
$var reg 16 C$ x_extended [15:0] $end
$var reg 8 D$ y_reg [7:0] $end
$upscope $end
$scope module m2 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 4$ start $end
$var wire 8 E$ x [7:0] $end
$var wire 8 F$ y [7:0] $end
$var reg 4 G$ count [3:0] $end
$var reg 1 /$ done $end
$var reg 16 H$ product [15:0] $end
$var reg 2 I$ state [1:0] $end
$var reg 16 J$ x_extended [15:0] $end
$var reg 8 K$ y_reg [7:0] $end
$upscope $end
$upscope $end
$scope module subtractor $end
$var wire 16 L$ b [15:0] $end
$var wire 1 M$ cin $end
$var wire 4 N$ sum3_1 [3:0] $end
$var wire 4 O$ sum3_0 [3:0] $end
$var wire 4 P$ sum2_1 [3:0] $end
$var wire 4 Q$ sum2_0 [3:0] $end
$var wire 4 R$ sum1_1 [3:0] $end
$var wire 4 S$ sum1_0 [3:0] $end
$var wire 16 T$ sum [15:0] $end
$var wire 1 > cout $end
$var wire 1 U$ c3_1 $end
$var wire 1 V$ c3_0 $end
$var wire 1 W$ c2_1 $end
$var wire 1 X$ c2_0 $end
$var wire 1 Y$ c2 $end
$var wire 1 Z$ c1_1 $end
$var wire 1 [$ c1_0 $end
$var wire 1 \$ c1 $end
$var wire 1 ]$ c0 $end
$var wire 16 ^$ a [15:0] $end
$scope module rca0 $end
$var wire 4 _$ a [3:0] $end
$var wire 4 `$ b [3:0] $end
$var wire 1 M$ cin $end
$var wire 4 a$ sum [3:0] $end
$var wire 1 ]$ cout $end
$var wire 1 b$ c3 $end
$var wire 1 c$ c2 $end
$var wire 1 d$ c1 $end
$scope module fa0 $end
$var wire 1 e$ a $end
$var wire 1 f$ b $end
$var wire 1 M$ cin $end
$var wire 1 d$ cout $end
$var wire 1 g$ sum $end
$var wire 1 h$ x $end
$var wire 1 i$ y $end
$var wire 1 j$ z $end
$upscope $end
$scope module fa1 $end
$var wire 1 k$ a $end
$var wire 1 l$ b $end
$var wire 1 d$ cin $end
$var wire 1 c$ cout $end
$var wire 1 m$ sum $end
$var wire 1 n$ x $end
$var wire 1 o$ y $end
$var wire 1 p$ z $end
$upscope $end
$scope module fa2 $end
$var wire 1 q$ a $end
$var wire 1 r$ b $end
$var wire 1 c$ cin $end
$var wire 1 b$ cout $end
$var wire 1 s$ sum $end
$var wire 1 t$ x $end
$var wire 1 u$ y $end
$var wire 1 v$ z $end
$upscope $end
$scope module fa3 $end
$var wire 1 w$ a $end
$var wire 1 x$ b $end
$var wire 1 b$ cin $end
$var wire 1 ]$ cout $end
$var wire 1 y$ sum $end
$var wire 1 z$ x $end
$var wire 1 {$ y $end
$var wire 1 |$ z $end
$upscope $end
$upscope $end
$scope module rca1_0 $end
$var wire 4 }$ a [3:0] $end
$var wire 4 ~$ b [3:0] $end
$var wire 1 !% cin $end
$var wire 4 "% sum [3:0] $end
$var wire 1 [$ cout $end
$var wire 1 #% c3 $end
$var wire 1 $% c2 $end
$var wire 1 %% c1 $end
$scope module fa0 $end
$var wire 1 &% a $end
$var wire 1 '% b $end
$var wire 1 !% cin $end
$var wire 1 %% cout $end
$var wire 1 (% sum $end
$var wire 1 )% x $end
$var wire 1 *% y $end
$var wire 1 +% z $end
$upscope $end
$scope module fa1 $end
$var wire 1 ,% a $end
$var wire 1 -% b $end
$var wire 1 %% cin $end
$var wire 1 $% cout $end
$var wire 1 .% sum $end
$var wire 1 /% x $end
$var wire 1 0% y $end
$var wire 1 1% z $end
$upscope $end
$scope module fa2 $end
$var wire 1 2% a $end
$var wire 1 3% b $end
$var wire 1 $% cin $end
$var wire 1 #% cout $end
$var wire 1 4% sum $end
$var wire 1 5% x $end
$var wire 1 6% y $end
$var wire 1 7% z $end
$upscope $end
$scope module fa3 $end
$var wire 1 8% a $end
$var wire 1 9% b $end
$var wire 1 #% cin $end
$var wire 1 [$ cout $end
$var wire 1 :% sum $end
$var wire 1 ;% x $end
$var wire 1 <% y $end
$var wire 1 =% z $end
$upscope $end
$upscope $end
$scope module rca1_1 $end
$var wire 4 >% a [3:0] $end
$var wire 4 ?% b [3:0] $end
$var wire 1 @% cin $end
$var wire 4 A% sum [3:0] $end
$var wire 1 Z$ cout $end
$var wire 1 B% c3 $end
$var wire 1 C% c2 $end
$var wire 1 D% c1 $end
$scope module fa0 $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var wire 1 @% cin $end
$var wire 1 D% cout $end
$var wire 1 G% sum $end
$var wire 1 H% x $end
$var wire 1 I% y $end
$var wire 1 J% z $end
$upscope $end
$scope module fa1 $end
$var wire 1 K% a $end
$var wire 1 L% b $end
$var wire 1 D% cin $end
$var wire 1 C% cout $end
$var wire 1 M% sum $end
$var wire 1 N% x $end
$var wire 1 O% y $end
$var wire 1 P% z $end
$upscope $end
$scope module fa2 $end
$var wire 1 Q% a $end
$var wire 1 R% b $end
$var wire 1 C% cin $end
$var wire 1 B% cout $end
$var wire 1 S% sum $end
$var wire 1 T% x $end
$var wire 1 U% y $end
$var wire 1 V% z $end
$upscope $end
$scope module fa3 $end
$var wire 1 W% a $end
$var wire 1 X% b $end
$var wire 1 B% cin $end
$var wire 1 Z$ cout $end
$var wire 1 Y% sum $end
$var wire 1 Z% x $end
$var wire 1 [% y $end
$var wire 1 \% z $end
$upscope $end
$upscope $end
$scope module rca2_0 $end
$var wire 4 ]% a [3:0] $end
$var wire 4 ^% b [3:0] $end
$var wire 1 _% cin $end
$var wire 4 `% sum [3:0] $end
$var wire 1 X$ cout $end
$var wire 1 a% c3 $end
$var wire 1 b% c2 $end
$var wire 1 c% c1 $end
$scope module fa0 $end
$var wire 1 d% a $end
$var wire 1 e% b $end
$var wire 1 _% cin $end
$var wire 1 c% cout $end
$var wire 1 f% sum $end
$var wire 1 g% x $end
$var wire 1 h% y $end
$var wire 1 i% z $end
$upscope $end
$scope module fa1 $end
$var wire 1 j% a $end
$var wire 1 k% b $end
$var wire 1 c% cin $end
$var wire 1 b% cout $end
$var wire 1 l% sum $end
$var wire 1 m% x $end
$var wire 1 n% y $end
$var wire 1 o% z $end
$upscope $end
$scope module fa2 $end
$var wire 1 p% a $end
$var wire 1 q% b $end
$var wire 1 b% cin $end
$var wire 1 a% cout $end
$var wire 1 r% sum $end
$var wire 1 s% x $end
$var wire 1 t% y $end
$var wire 1 u% z $end
$upscope $end
$scope module fa3 $end
$var wire 1 v% a $end
$var wire 1 w% b $end
$var wire 1 a% cin $end
$var wire 1 X$ cout $end
$var wire 1 x% sum $end
$var wire 1 y% x $end
$var wire 1 z% y $end
$var wire 1 {% z $end
$upscope $end
$upscope $end
$scope module rca2_1 $end
$var wire 4 |% a [3:0] $end
$var wire 4 }% b [3:0] $end
$var wire 1 ~% cin $end
$var wire 4 !& sum [3:0] $end
$var wire 1 W$ cout $end
$var wire 1 "& c3 $end
$var wire 1 #& c2 $end
$var wire 1 $& c1 $end
$scope module fa0 $end
$var wire 1 %& a $end
$var wire 1 && b $end
$var wire 1 ~% cin $end
$var wire 1 $& cout $end
$var wire 1 '& sum $end
$var wire 1 (& x $end
$var wire 1 )& y $end
$var wire 1 *& z $end
$upscope $end
$scope module fa1 $end
$var wire 1 +& a $end
$var wire 1 ,& b $end
$var wire 1 $& cin $end
$var wire 1 #& cout $end
$var wire 1 -& sum $end
$var wire 1 .& x $end
$var wire 1 /& y $end
$var wire 1 0& z $end
$upscope $end
$scope module fa2 $end
$var wire 1 1& a $end
$var wire 1 2& b $end
$var wire 1 #& cin $end
$var wire 1 "& cout $end
$var wire 1 3& sum $end
$var wire 1 4& x $end
$var wire 1 5& y $end
$var wire 1 6& z $end
$upscope $end
$scope module fa3 $end
$var wire 1 7& a $end
$var wire 1 8& b $end
$var wire 1 "& cin $end
$var wire 1 W$ cout $end
$var wire 1 9& sum $end
$var wire 1 :& x $end
$var wire 1 ;& y $end
$var wire 1 <& z $end
$upscope $end
$upscope $end
$scope module rca3_0 $end
$var wire 4 =& a [3:0] $end
$var wire 4 >& b [3:0] $end
$var wire 1 ?& cin $end
$var wire 4 @& sum [3:0] $end
$var wire 1 V$ cout $end
$var wire 1 A& c3 $end
$var wire 1 B& c2 $end
$var wire 1 C& c1 $end
$scope module fa0 $end
$var wire 1 D& a $end
$var wire 1 E& b $end
$var wire 1 ?& cin $end
$var wire 1 C& cout $end
$var wire 1 F& sum $end
$var wire 1 G& x $end
$var wire 1 H& y $end
$var wire 1 I& z $end
$upscope $end
$scope module fa1 $end
$var wire 1 J& a $end
$var wire 1 K& b $end
$var wire 1 C& cin $end
$var wire 1 B& cout $end
$var wire 1 L& sum $end
$var wire 1 M& x $end
$var wire 1 N& y $end
$var wire 1 O& z $end
$upscope $end
$scope module fa2 $end
$var wire 1 P& a $end
$var wire 1 Q& b $end
$var wire 1 B& cin $end
$var wire 1 A& cout $end
$var wire 1 R& sum $end
$var wire 1 S& x $end
$var wire 1 T& y $end
$var wire 1 U& z $end
$upscope $end
$scope module fa3 $end
$var wire 1 V& a $end
$var wire 1 W& b $end
$var wire 1 A& cin $end
$var wire 1 V$ cout $end
$var wire 1 X& sum $end
$var wire 1 Y& x $end
$var wire 1 Z& y $end
$var wire 1 [& z $end
$upscope $end
$upscope $end
$scope module rca3_1 $end
$var wire 4 \& a [3:0] $end
$var wire 4 ]& b [3:0] $end
$var wire 1 ^& cin $end
$var wire 4 _& sum [3:0] $end
$var wire 1 U$ cout $end
$var wire 1 `& c3 $end
$var wire 1 a& c2 $end
$var wire 1 b& c1 $end
$scope module fa0 $end
$var wire 1 c& a $end
$var wire 1 d& b $end
$var wire 1 ^& cin $end
$var wire 1 b& cout $end
$var wire 1 e& sum $end
$var wire 1 f& x $end
$var wire 1 g& y $end
$var wire 1 h& z $end
$upscope $end
$scope module fa1 $end
$var wire 1 i& a $end
$var wire 1 j& b $end
$var wire 1 b& cin $end
$var wire 1 a& cout $end
$var wire 1 k& sum $end
$var wire 1 l& x $end
$var wire 1 m& y $end
$var wire 1 n& z $end
$upscope $end
$scope module fa2 $end
$var wire 1 o& a $end
$var wire 1 p& b $end
$var wire 1 a& cin $end
$var wire 1 `& cout $end
$var wire 1 q& sum $end
$var wire 1 r& x $end
$var wire 1 s& y $end
$var wire 1 t& z $end
$upscope $end
$scope module fa3 $end
$var wire 1 u& a $end
$var wire 1 v& b $end
$var wire 1 `& cin $end
$var wire 1 U$ cout $end
$var wire 1 w& sum $end
$var wire 1 x& x $end
$var wire 1 y& y $end
$var wire 1 z& z $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CU $end
$var wire 1 5 alu_done $end
$var wire 16 {& alu_result_high [15:0] $end
$var wire 16 |& alu_result_low [15:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # start $end
$var wire 16 }& reg_read_data2 [15:0] $end
$var wire 16 ~& reg_read_data1 [15:0] $end
$var wire 16 !' mem_data_out [15:0] $end
$var reg 16 "' PC [15:0] $end
$var reg 9 #' address_imm [8:0] $end
$var reg 16 $' alu_a [15:0] $end
$var reg 16 %' alu_b [15:0] $end
$var reg 3 &' alu_opcode [2:0] $end
$var reg 1 1 alu_start $end
$var reg 2 '' base [1:0] $end
$var reg 16 (' effective_addr [15:0] $end
$var reg 16 )' instr [15:0] $end
$var reg 16 *' mem_address [15:0] $end
$var reg 16 +' mem_data_in [15:0] $end
$var reg 1 - mem_read_enable $end
$var reg 1 , mem_write_enable $end
$var reg 3 ,' opcode [2:0] $end
$var reg 2 -' rd [1:0] $end
$var reg 1 + ready $end
$var reg 2 .' reg_read_addr1 [1:0] $end
$var reg 2 /' reg_read_addr2 [1:0] $end
$var reg 2 0' reg_write_addr [1:0] $end
$var reg 16 1' reg_write_data [15:0] $end
$var reg 1 $ reg_write_enable $end
$var reg 2 2' rs1 [1:0] $end
$var reg 2 3' rs2 [1:0] $end
$var reg 4 4' state [3:0] $end
$upscope $end
$scope module MEM $end
$var wire 16 5' address [15:0] $end
$var wire 1 ! clk $end
$var wire 16 6' data_in [15:0] $end
$var wire 1 - read_enable $end
$var wire 1 " reset $end
$var wire 1 , write_enable $end
$var reg 16 7' data_out [15:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 8' i [31:0] $end
$upscope $end
$upscope $end
$scope module RF $end
$var wire 1 ! clk $end
$var wire 2 9' read_reg_index1 [1:0] $end
$var wire 2 :' read_reg_index2 [1:0] $end
$var wire 1 " reset $end
$var wire 16 ;' write_data [15:0] $end
$var wire 1 $ write_enable $end
$var wire 2 <' write_reg_index [1:0] $end
$var reg 16 =' reg_read_1 [15:0] $end
$var reg 16 >' reg_read_2 [15:0] $end
$var reg 16 ?' x0 [15:0] $end
$var reg 16 @' x1 [15:0] $end
$var reg 16 A' x2 [15:0] $end
$var reg 16 B' x3 [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$var wire 1 + ready $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # start $end
$scope module CPU $end
$scope module ALU $end
$scope module adder $end
$scope module rca0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca1_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca1_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca2_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca2_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca3_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca3_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$upscope $end
$scope module div_unit $end
$upscope $end
$scope module mult_unit $end
$scope module m0 $end
$upscope $end
$scope module m1 $end
$upscope $end
$scope module m2 $end
$upscope $end
$upscope $end
$scope module subtractor $end
$scope module rca0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca1_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca1_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca2_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca2_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca3_0 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$scope module rca3_1 $end
$scope module fa0 $end
$upscope $end
$scope module fa1 $end
$upscope $end
$scope module fa2 $end
$upscope $end
$scope module fa3 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CU $end
$upscope $end
$scope module MEM $end
$scope begin $ivl_for_loop0 $end
$upscope $end
$upscope $end
$scope module RF $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B'
b0 A'
b0 @'
b0 ?'
bx >'
bx ='
bx <'
bx ;'
bx :'
bx 9'
b10000000000000000 8'
b0 7'
bx 6'
bx 5'
b0 4'
bx 3'
bx 2'
bx 1'
bx 0'
bx /'
bx .'
bx -'
bx ,'
bx +'
bx *'
bx )'
bx ('
bx ''
bx &'
bx %'
bx $'
bx #'
b0 "'
b0 !'
bx ~&
bx }&
b0 |&
b0 {&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
bx _&
1^&
bx ]&
bx \&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
0I&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
bx @&
0?&
bx >&
bx =&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
bx !&
1~%
bx }%
bx |%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
0i%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
bx `%
0_%
bx ^%
bx ]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
bx A%
1@%
bx ?%
bx >%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
0+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
bx "%
0!%
bx ~$
bx }$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
bx a$
bx `$
bx _$
bx ^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
1M$
bx L$
b0 K$
b0 J$
b0 I$
b0 H$
b0 G$
bx F$
bx E$
b0 D$
b0 C$
b0 B$
b0 A$
b0 @$
bx ?$
bx >$
b0 =$
b0 <$
b0 ;$
b0 :$
b0 9$
bx 8$
bx 7$
b0 6$
b0 5$
04$
03$
02$
b0 1$
00$
0/$
0.$
b0 -$
bx ,$
bx +$
bx *$
bx )$
bx ($
bx '$
b0 &$
b0 %$
bx $$
bx #$
bx "$
bx !$
bx ~#
b0 }#
b0 |#
b0 {#
b0 z#
bx y#
bx x#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
bx \#
1[#
bx Z#
bx Y#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
0F#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
bx =#
0<#
bx ;#
bx :#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
bx |"
1{"
bx z"
bx y"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
0f"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
bx ]"
0\"
bx ["
bx Z"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
bx >"
1="
bx <"
bx ;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
0("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
bx }
0|
bx {
bx z
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
0g
xf
xe
xd
xc
xb
xa
x`
x_
bx ^
bx ]
bx \
bx [
bx Z
xY
xX
xW
xV
xU
xT
xS
xR
xQ
bx P
bx O
bx N
bx M
bx L
bx K
bx J
0I
b0 H
b0 G
b0 F
0E
0D
bx C
bx B
bx A
bx @
x?
x>
0=
b0 <
b0 ;
0:
b0 9
bx 8
bx 7
bx 6
05
bx 4
b0 3
b0 2
01
bx 0
bx /
b0 .
0-
0,
0+
bx *
bx )
bx (
bx '
bx &
bx %
0$
0#
1"
0!
$end
#5000
b10000000000000000 8'
1!
#10000
0!
1#
b100 B'
b1010 A'
0"
#15000
b1 4'
1!
#20000
0!
0#
#25000
b10 4'
1-
b0 0
b0 *'
b0 5'
1!
#30000
0!
#35000
b11 4'
0-
b110110110000000 .
b110110110000000 !'
b110110110000000 7'
1!
#40000
0!
#45000
b100 4'
b11 3'
b10 2'
b1 -'
b11 ,'
b110110110000000 )'
1!
#50000
0!
#55000
b101 4'
b11 )
b11 /'
b11 :'
b10 *
b10 .'
b10 9'
1!
#60000
b100 '
b100 }&
b100 >'
b1010 (
b1010 ~&
b1010 ='
0!
#65000
1>
1Y$
1\$
1Z$
1W$
1U$
0Y%
1\%
09&
1<&
0w&
1z&
1B%
1"&
1`&
0V$
0X$
0[$
0Y
0S%
1V%
03&
16&
0q&
1t&
1X&
0[&
1x%
0{%
1:%
0=%
1v
0y
1C%
1#&
1a&
0A&
0a%
0#%
0_
1m$
0y$
0M%
1P%
0-&
10&
0k&
1n&
1R&
0U&
1r%
0u%
14%
07%
1p
0s
1d$
1s$
0b$
1D%
1$&
1b&
0B&
0b%
0$%
0h#
0n#
0t#
0O#
0U#
0?
0*#
00#
06#
0o"
0u"
0U
0J"
0P"
0V"
01"
07"
0X
0`
b110 B
b110 T$
b110 a$
0g$
1j$
0p$
1c$
0v$
0|$
1]$
1(%
b0 R$
b0 A%
0G%
1J%
1f%
b0 P$
b0 !&
0'&
1*&
1F&
b0 N$
b0 _&
0e&
1h&
b1111 O$
b1111 @&
1L&
0O&
b1111 Q$
b1111 `%
1l%
0o%
b1111 S$
b1111 "%
1.%
01%
0_#
0^#
0]#
0Q
0I#
0?#
0>#
0R
0!#
0~"
0}"
0S
0i"
0_"
0^"
0T
0A"
0@"
0?"
0V
0+"
0!"
0~
0W
1j
0m
1h$
0n$
1o$
0t$
0z$
1{$
1)%
1/%
15%
1;%
1H%
1N%
1T%
1Z%
1g%
1m%
1s%
1y%
1(&
1.&
14&
1:&
1G&
1M&
1S&
1Y&
1f&
1l&
1r&
1x&
0C&
0c%
0%%
b1 J
b1 \#
1b#
0e#
0k#
0q#
0w#
b0 K
b0 =#
0C#
0@#
0L#
0R#
0X#
b1 L
b1 |"
1$#
0'#
0-#
03#
09#
b0 M
b0 ]"
0c"
0`"
0l"
0r"
0x"
b1 N
b1 >"
1D"
0G"
0M"
0S"
0Y"
b0 O
b0 }
0%"
0""
0."
04"
0:"
b1110 C
b1110 P
b1110 ^
0d
0a
1f$
1l$
0r$
1x$
1'%
1-%
13%
19%
1F%
1L%
1R%
1X%
1e%
1k%
1q%
1w%
1&&
1,&
12&
18&
1E&
1K&
1Q&
1W&
1d&
1j&
1p&
1v&
0g&
0m&
0s&
0y&
0H&
0N&
0T&
0Z&
0)&
0/&
05&
0;&
0h%
0n%
0t%
0z%
0I%
0O%
0U%
0[%
0*%
00%
06%
0<%
0i$
0u$
0c#
0d#
0i#
0j#
0o#
0p#
0u#
0v#
0D#
0E#
0J#
0K#
0P#
0Q#
0V#
0W#
0%#
0&#
0+#
0,#
01#
02#
07#
08#
0d"
0e"
0j"
0k"
0p"
0q"
0v"
0w"
0E"
0F"
0K"
0L"
0Q"
0R"
0W"
0X"
0&"
0'"
0,"
0-"
02"
03"
08"
09"
0e
0f
1k
0l
1q
0r
1w
0x
0a#
0g#
0m#
0s#
0B#
0H#
0N#
0T#
0##
0)#
0/#
05#
0b"
0h"
0n"
0t"
0C"
0I"
0O"
0U"
0$"
0*"
00"
06"
0c
0i
1o
0u
b1011 `$
b1111 ~$
b1111 ?%
b1111 ^%
b1111 }%
b1111 >&
b1111 ]&
0c&
0i&
0o&
0u&
0D&
0J&
0P&
0V&
0%&
0+&
01&
07&
0d%
0j%
0p%
0v%
0E%
0K%
0Q%
0W%
0&%
0,%
02%
08%
0e$
1k$
0q$
1w$
0`#
0f#
0l#
0r#
0A#
0G#
0M#
0S#
0"#
0(#
0.#
04#
0a"
0g"
0m"
0s"
0B"
0H"
0N"
0T"
0#"
0)"
0/"
05"
0b
1h
0n
1t
b100 F$
b0 ($
b0 ?$
b100 '$
b100 8$
b0 Z#
b0 ;#
b0 z"
b0 ["
b0 <"
b0 {
b100 ]
b1111111111111011 L$
b0 \&
b0 =&
b0 |%
b0 ]%
b0 >%
b0 }$
b1010 _$
b1010 E$
b0 +$
b0 >$
b1010 *$
b1010 7$
b0 Y#
b0 :#
b0 y"
b0 Z"
b0 ;"
b0 z
b1010 \
b110 4'
11
b11 4
b11 8
b11 &'
b100 6
b100 @
b100 Z
b100 x#
b100 )$
b100 %'
b1010 7
b1010 A
b1010 [
b1010 y#
b1010 ,$
b1010 ^$
b1010 $'
1!
#70000
0!
#75000
b10 H
1D
1!
#80000
0!
#85000
0D
b1 }#
1!
#90000
0!
#95000
b10 }#
b0 #$
b0 $$
b100 "$
b1010 !$
1!
#100000
0!
#105000
b1 z#
b10100 !$
b11111111111111100 ~#
1!
#110000
0!
#115000
b10 z#
b101000 !$
1!
#120000
0!
#125000
b11 z#
b1010000 !$
1!
#130000
0!
#135000
b100 z#
b10100000 !$
1!
#140000
0!
#145000
b101 z#
b101000000 !$
1!
#150000
0!
#155000
b110 z#
b1010000000 !$
1!
#160000
0!
#165000
b111 z#
b10100000000 !$
1!
#170000
0!
#175000
b1000 z#
b101000000000 !$
1!
#180000
0!
#185000
b1001 z#
b1010000000000 !$
1!
#190000
0!
#195000
b1010 z#
b10100000000000 !$
1!
#200000
0!
#205000
b1011 z#
b101000000000000 !$
1!
#210000
0!
#215000
b1100 z#
b1010000000000000 !$
1!
#220000
0!
#225000
b1101 z#
b1 $$
b100000000000000 !$
b11111111111111101 ~#
1!
#230000
0!
#235000
b1110 z#
b10 $$
b1000000000000000 !$
b11111111111111110 ~#
1!
#240000
0!
#245000
b1111 z#
b1 #$
b1 $$
b0 !$
b1 ~#
1!
#250000
0!
#255000
b10000 z#
b10 #$
b10 $$
b11111111111111110 ~#
1!
#260000
0!
#265000
b11 }#
1!
#270000
0!
#275000
b0 }#
1=
b10 ;
b10 |#
b10 <
b10 {#
1!
#280000
0!
#285000
b11 H
15
b10 3
b10 F
b10 {&
b10 2
b10 G
b10 |&
1!
#290000
0!
#295000
b1000 4'
1$
b10 %
b10 1'
b10 ;'
b1 &
b1 0'
b1 <'
01
b0 H
1!
#300000
0!
#305000
05
b1001 4'
b10 @'
1!
#310000
0!
#315000
b1 4'
1+
b1 "'
0$
1!
#320000
0!
#325000
b10 4'
0+
1-
b1 0
b1 *'
b1 5'
1!
#330000
0!
#335000
b11 4'
0-
b1010100000000101 .
b1010100000000101 !'
b1010100000000101 7'
1!
#340000
0!
#345000
b100 4'
b101 #'
b0 ''
b101 ,'
b1010100000000101 )'
1!
#350000
0!
#355000
b101 4'
b1 )
b1 /'
b1 :'
b0 *
b0 .'
b0 9'
1!
#360000
b10 '
b10 }&
b10 >'
b0 (
b0 ~&
b0 ='
0!
#365000
b111 4'
b101 ('
1!
#370000
0!
#375000
b1001 4'
b10 /
b10 +'
b10 6'
1,
b101 0
b101 *'
b101 5'
1!
#380000
0!
#385000
b1 4'
1+
b10 "'
0,
1!
#390000
0!
#395000
b10 4'
0+
1-
b10 0
b10 *'
b10 5'
1!
#400000
0!
#405000
b1001100000000101 .
b1001100000000101 !'
b1001100000000101 7'
b11 4'
0-
1!
#410000
0!
#415000
b100 4'
b11 -'
b100 ,'
b1001100000000101 )'
1!
#420000
0!
#425000
b101 4'
1!
#430000
0!
#435000
b111 4'
1!
#440000
0!
#445000
b10 4'
1-
b101 0
b101 *'
b101 5'
1!
#450000
0!
#455000
b1000 4'
0-
b10 .
b10 !'
b10 7'
1!
#460000
0!
#465000
b1001 4'
b11 &
b11 0'
b11 <'
1$
1!
#470000
0!
#475000
b1 4'
1+
b11 "'
0$
b10 B'
1!
#480000
0!
#485000
b10 4'
0+
1-
b11 0
b11 *'
b11 5'
1!
#490000
0!
#495000
b1000 4'
0-
b0 .
b0 !'
b0 7'
1!
#500000
0!
#505000
b1001 4'
b0 %
b0 1'
b0 ;'
1$
1!
#510000
0!
#515000
b1 4'
1+
b100 "'
0$
b0 B'
1!
#520000
0!
#525000
b10 4'
0+
1-
b100 0
b100 *'
b100 5'
1!
#530000
0!
#535000
b1000 4'
0-
1!
#540000
0!
#545000
b1001 4'
1$
1!
#550000
0!
#555000
b1 4'
1+
b101 "'
0$
1!
#560000
0!
#565000
b10 4'
0+
1-
b101 0
b101 *'
b101 5'
1!
#570000
0!
#575000
b1000 4'
0-
b10 .
b10 !'
b10 7'
1!
#580000
0!
#585000
b1001 4'
b10 %
b10 1'
b10 ;'
1$
1!
#590000
0!
#595000
b1 4'
1+
b110 "'
0$
b10 B'
1!
#600000
0!
#605000
b10 4'
0+
1-
b110 0
b110 *'
b110 5'
1!
#610000
0!
#615000
b1000 4'
0-
b0 .
b0 !'
b0 7'
1!
#620000
0!
#625000
b1001 4'
b0 %
b0 1'
b0 ;'
1$
1!
#630000
0!
#635000
b1 4'
1+
b111 "'
0$
b0 B'
1!
#640000
0!
#645000
b10 4'
0+
1-
b111 0
b111 *'
b111 5'
1!
#650000
0!
#655000
b1000 4'
0-
1!
#660000
0!
#665000
b1001 4'
1$
1!
#670000
0!
#675000
b1 4'
1+
b1000 "'
0$
1!
#680000
0!
#685000
b10 4'
0+
1-
b1000 0
b1000 *'
b1000 5'
1!
#690000
0!
#695000
b1000 4'
0-
1!
#700000
0!
#705000
b1001 4'
1$
1!
#710000
0!
#715000
b1 4'
1+
b1001 "'
0$
1!
#720000
0!
#725000
b10 4'
0+
1-
b1001 0
b1001 *'
b1001 5'
1!
#730000
0!
#735000
b1000 4'
0-
1!
#740000
0!
#745000
b1001 4'
1$
1!
#750000
0!
#755000
b1 4'
1+
b1010 "'
0$
1!
#760000
0!
#765000
b10 4'
0+
1-
b1010 0
b1010 *'
b1010 5'
1!
#770000
0!
#775000
b1000 4'
0-
1!
#780000
0!
#785000
b1001 4'
1$
1!
#790000
0!
#795000
b1 4'
1+
b1011 "'
0$
1!
#800000
0!
#805000
b10 4'
0+
1-
b1011 0
b1011 *'
b1011 5'
1!
#810000
0!
#815000
b1000 4'
0-
1!
#820000
0!
#825000
b1001 4'
1$
1!
#830000
0!
#835000
b1 4'
1+
b1100 "'
0$
1!
#840000
0!
#845000
b10 4'
0+
1-
b1100 0
b1100 *'
b1100 5'
1!
#850000
0!
#855000
b1000 4'
0-
1!
#860000
0!
#865000
b1001 4'
1$
1!
#870000
0!
#875000
b1 4'
1+
b1101 "'
0$
1!
#880000
0!
#885000
b10 4'
0+
1-
b1101 0
b1101 *'
b1101 5'
1!
#890000
0!
#895000
b1000 4'
0-
1!
#900000
0!
#905000
b1001 4'
1$
1!
#910000
0!
#915000
b1 4'
1+
b1110 "'
0$
1!
#920000
0!
#925000
b10 4'
0+
1-
b1110 0
b1110 *'
b1110 5'
1!
#930000
0!
#935000
b1000 4'
0-
1!
#940000
0!
#945000
b1001 4'
1$
1!
#950000
0!
#955000
b1 4'
1+
b1111 "'
0$
1!
#960000
0!
#965000
b10 4'
0+
1-
b1111 0
b1111 *'
b1111 5'
1!
#970000
0!
#975000
b1000 4'
0-
1!
#980000
0!
#985000
b1001 4'
1$
1!
#990000
0!
#995000
b1 4'
1+
b10000 "'
0$
1!
#1000000
0!
